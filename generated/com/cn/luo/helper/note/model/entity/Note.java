package com.cn.luo.helper.note.model.entity;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.cn.luo.helper.note.model.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.cn.luo.helper.note.model.dao.NoteDao;
import com.cn.luo.helper.note.model.dao.TagDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "note".
 */
@Entity(active = true, nameInDb = "note")
public class Note {

    @Id
    @Property(nameInDb = "id")
    private Long id;

    @Property(nameInDb = "title")
    @NotNull
    @Unique
    private String title;

    @Property(nameInDb = "content")
    @NotNull
    private String content;

    @Property(nameInDb = "created_time")
    @NotNull
    private java.util.Date createdTime;

    @Property(nameInDb = "modified_time")
    @NotNull
    private java.util.Date modifiedTime;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient NoteDao myDao;

    @ToMany
    @JoinEntity(entity = NoteAndTag.class, sourceProperty = "noteId", targetProperty = "tagId")
    private List<Tag> tagList;

    @Generated
    public Note() {
    }

    public Note(Long id) {
        this.id = id;
    }

    @Generated
    public Note(Long id, String title, String content, java.util.Date createdTime, java.util.Date modifiedTime) {
        this.id = id;
        this.title = title;
        this.content = content;
        this.createdTime = createdTime;
        this.modifiedTime = modifiedTime;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNoteDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(@NotNull String title) {
        this.title = title;
    }

    @NotNull
    public String getContent() {
        return content;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setContent(@NotNull String content) {
        this.content = content;
    }

    @NotNull
    public java.util.Date getCreatedTime() {
        return createdTime;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreatedTime(@NotNull java.util.Date createdTime) {
        this.createdTime = createdTime;
    }

    @NotNull
    public java.util.Date getModifiedTime() {
        return modifiedTime;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setModifiedTime(@NotNull java.util.Date modifiedTime) {
        this.modifiedTime = modifiedTime;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Tag> getTagList() {
        if (tagList == null) {
            __throwIfDetached();
            TagDao targetDao = daoSession.getTagDao();
            List<Tag> tagListNew = targetDao._queryNote_TagList(id);
            synchronized (this) {
                if(tagList == null) {
                    tagList = tagListNew;
                }
            }
        }
        return tagList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTagList() {
        tagList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
