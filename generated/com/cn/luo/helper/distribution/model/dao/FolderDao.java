package com.cn.luo.helper.distribution.model.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.cn.luo.helper.distribution.model.entity.FolderAndSuffix;
import com.cn.luo.helper.distribution.model.entity.PlanAndFolder;

import com.cn.luo.helper.distribution.model.entity.Folder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "folder".
*/
public class FolderDao extends AbstractDao<Folder, Long> {

    public static final String TABLENAME = "folder";

    /**
     * Properties of entity Folder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Path = new Property(1, String.class, "path", false, "path");
    }

    private DaoSession daoSession;

    private Query<Folder> plan_FolderListQuery;
    private Query<Folder> suffix_FolderListQuery;

    public FolderDao(DaoConfig config) {
        super(config);
    }
    
    public FolderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"folder\" (" + //
                "\"id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"path\" TEXT NOT NULL UNIQUE );"); // 1: path
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"folder\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Folder entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPath());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Folder entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPath());
    }

    @Override
    protected final void attachEntity(Folder entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Folder readEntity(Cursor cursor, int offset) {
        Folder entity = new Folder( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1) // path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Folder entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPath(cursor.getString(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Folder entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Folder entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Folder entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "folderList" to-many relationship of Plan. */
    public List<Folder> _queryPlan_FolderList(long planId) {
        synchronized (this) {
            if (plan_FolderListQuery == null) {
                QueryBuilder<Folder> queryBuilder = queryBuilder();
                queryBuilder.join(PlanAndFolder.class, PlanAndFolderDao.Properties.FolderId)
                    .where(PlanAndFolderDao.Properties.PlanId.eq(planId));
                plan_FolderListQuery = queryBuilder.build();
            }
        }
        Query<Folder> query = plan_FolderListQuery.forCurrentThread();
        query.setParameter(0, planId);
        return query.list();
    }

    /** Internal query to resolve the "folderList" to-many relationship of Suffix. */
    public List<Folder> _querySuffix_FolderList(long suffixId) {
        synchronized (this) {
            if (suffix_FolderListQuery == null) {
                QueryBuilder<Folder> queryBuilder = queryBuilder();
                queryBuilder.join(FolderAndSuffix.class, FolderAndSuffixDao.Properties.FolderId)
                    .where(FolderAndSuffixDao.Properties.SuffixId.eq(suffixId));
                suffix_FolderListQuery = queryBuilder.build();
            }
        }
        Query<Folder> query = suffix_FolderListQuery.forCurrentThread();
        query.setParameter(0, suffixId);
        return query.list();
    }

}
