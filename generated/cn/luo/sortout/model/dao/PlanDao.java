package cn.luo.sortout.model.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import cn.luo.sortout.model.entity.PlanAndFolder;
import cn.luo.sortout.model.entity.PlanAndSuffix;

import cn.luo.sortout.model.entity.Plan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "plan".
*/
public class PlanDao extends AbstractDao<Plan, Long> {

    public static final String TABLENAME = "plan";

    /**
     * Properties of entity Plan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
    }

    private DaoSession daoSession;

    private Query<Plan> folder_PlanListQuery;
    private Query<Plan> suffix_PlanListQuery;

    public PlanDao(DaoConfig config) {
        super(config);
    }
    
    public PlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"plan\" (" + //
                "\"id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"name\" TEXT NOT NULL UNIQUE );"); // 1: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"plan\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Plan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Plan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
    }

    @Override
    protected final void attachEntity(Plan entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Plan readEntity(Cursor cursor, int offset) {
        Plan entity = new Plan( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Plan entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Plan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Plan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Plan entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "planList" to-many relationship of Folder. */
    public List<Plan> _queryFolder_PlanList(long folderId) {
        synchronized (this) {
            if (folder_PlanListQuery == null) {
                QueryBuilder<Plan> queryBuilder = queryBuilder();
                queryBuilder.join(PlanAndFolder.class, PlanAndFolderDao.Properties.PlanId)
                    .where(PlanAndFolderDao.Properties.FolderId.eq(folderId));
                folder_PlanListQuery = queryBuilder.build();
            }
        }
        Query<Plan> query = folder_PlanListQuery.forCurrentThread();
        query.setParameter(0, folderId);
        return query.list();
    }

    /** Internal query to resolve the "planList" to-many relationship of Suffix. */
    public List<Plan> _querySuffix_PlanList(long suffixId) {
        synchronized (this) {
            if (suffix_PlanListQuery == null) {
                QueryBuilder<Plan> queryBuilder = queryBuilder();
                queryBuilder.join(PlanAndSuffix.class, PlanAndSuffixDao.Properties.PlanId)
                    .where(PlanAndSuffixDao.Properties.SuffixId.eq(suffixId));
                suffix_PlanListQuery = queryBuilder.build();
            }
        }
        Query<Plan> query = suffix_PlanListQuery.forCurrentThread();
        query.setParameter(0, suffixId);
        return query.list();
    }

}
